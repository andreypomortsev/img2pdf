
services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://user:password@db/mydatabase
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --method=GET --output-document=/dev/null http://localhost:8000/api/v1/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydatabase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine

  worker:
    build: .
    command: celery -A app.worker.celery_app worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@db/mydatabase
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  test:
    build: .
    command: >
      bash -c "
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h db -U user -d mydatabase; do
          echo 'Waiting for database...';
          sleep 1;
        done &&
        echo 'Creating database tables...' &&
        python -c 'from app.db.base import Base; from app.db.session import get_engine; engine = get_engine(); Base.metadata.create_all(bind=engine)' &&
        echo 'Running tests...' &&
        python -m pytest tests/ -v --cov=app --cov-report=term-missing
      "
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://user:password@db/mydatabase
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TESTING=True
      - API_BASE_URL=http://web:8000
      - PYTHONPATH=/app

volumes:
  postgres_data:
